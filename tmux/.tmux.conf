set-option -g default-shell $SHELL

# Set TERM properly, or programs in tmux will mess up colors {{{
## update the TERM variable of terminal emulator when creating a new session or attaching a existing session
set -g update-environment 'DISPLAY SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY TERM'
## determine if we should enable 256-colour support
# The weird invocation is because tmux runs the command through sh and [[ isn't supported in sh.
# Trying to use just sh tools is slightly convoluted compared to the bashism. Sorry.
if-shell "bash -c '[[ ${TERM} =~ 256color || ${TERM} == fbterm || ${TERM} == xterm-termite ]]'" 'set -g default-terminal tmux-256color' 'set -g default-terminal tmux'
set -as terminal-overrides ",*-256color:Tc"
# }}}

## Set mouse and utf8 options {{{
# Version-specific commands [grumble, grumble]
# See: https://github.com/tmux/tmux/blob/master/CHANGES
# Thanks to http://stackoverflow.com/a/40902312
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)"

if-shell -b '[ "$(echo "$TMUX_VERSION < 2.1" | bc)" = 1 ]' \
  "set -g mouse-select-pane on; set -g mode-mouse on; \
    set -g mouse-resize-pane on; set -g mouse-select-window on"

# In version 2.1 "mouse" replaced the previous 4 mouse options
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.1" | bc)" = 1 ]' \
  "set -g mouse on"

# UTF8 is autodetected in 2.2 onwards, but errors if explicitly set
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.2" | bc)" = 1 ]' \
  "set -g utf8 on; set -g status-utf8 on; set -g mouse-utf8 on"
# }}}

set-option -sg escape-time 300
set -g history-limit 10000

# 0 is too far from ` ;)
set -g base-index 1

# Set window titles
set-window-option -g automatic-rename on
set-option -g set-titles on

# Better page scrolling
bind -n PageUp copy-mode -eu

# Please generate and send xterm-style keycodes
set-option -wg xterm-keys on
# Act like vim {{{
setw -g mode-keys vi
# Vim style pane selection {{{
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# }}}
# Use Alt-vim keys without prefix key to switch panes {{{
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R
# }}}
# Switch panes using Alt-arrow without prefix {{{
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D
# }}}
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+
bind ` copy-mode
unbind p
bind p paste-buffer
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-selection
# }}}

bind C-v paste-buffer

# Shift arrow to switch prev/next windows {{{
bind -n S-Left  previous-window
bind -n S-Right next-window
# }}}

# after copying to a tmux buffer, hit y again to copy to clipboard
bind y run "tmux save-buffer - | xclip"

# Tmux Plugin Manager plugins {{{
set -g @plugin 'tmux-plugins/tpm'
# prefix + I - install
# prefix + U - update

set -g @plugin 'tmux-plugins/tmux-sensible'

# mouse niceties. emulates mouse for programs like less
set -g @plugin 'nhdaly/tmux-better-mouse-mode'

set -g @plugin 'tmux-plugins/tmux-sessionist'
# prefix + g - prompts for session name and switches to it. Performs 'kind-of' name completion.
# Faster than the built-in prefix + s prompt for long session lists.
# prefix + C (shift + c) - prompt for creating a new session by name.
# prefix + X (shift + x) - kill current session without detaching tmux.
# prefix + S (shift + s) - switches to the last session.
# The same as built-in prefix + L that everyone seems to override with some other binding.
# prefix + @ - promote current pane into a new session.
# Analogous to how prefix + ! breaks current pane to a new window.
# prefix + t<secondary-key> - join currently marked pane (prefix + m) to current session/window, and switch to it
# secondary-keys
# h, -, ": join horizontally
# v, |, %: join vertically
# f, @: join full screen

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-strategy-nvim 'session'
# prefix + Ctrl-s - save
# prefix + Ctrl-r - restore

set -g @plugin 'tmux-plugins/tmux-logging'
# prefix + shift + p - toggle logging to homedir
# prefix + alt + p - screen capture to homedir
# prefix + alt + shift + p - save complete history to homedir
# prefix + alt + c - clear pane history

set -g @plugin 'tmux-plugins/tmux-copycat'
# prefix + / - regex search (strings work too)
# p/n to select prev/next, Enter to copy (vi mode)
# prefix + ctrl-f - simple file search
# prefix + ctrl-g - jumping over git status files (best used after git status command)
# prefix + alt-h - jumping over SHA-1/SHA-256 hashes (best used after git log command)
# prefix + ctrl-u - url search (http, ftp and git urls)
# prefix + ctrl-d - number search (mnemonic d, as digit)
# prefix + alt-i - ip address search

set -g @plugin 'tmux-plugins/tmux-open'
# In tmux copy mode:
# o - "open" a highlighted selection with the system default program. open for OS X or xdg-open for Linux.
# Ctrl-o - open a highlighted selection with the $EDITOR
# Shift-s - search the highlighted selection directly inside a search engine (defaults to google).
set -g @open-S 'https://www.duckduckgo.com/'
set -g @open-D 'https://www.duckduckgo.com/'
set -g @open-G 'https://www.google.com/search?q='

set -g @plugin 'jbnicolai/tmux-fpp'
# Prefix+f to start fpp with tty contents

set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @prefix_highlight_show_copy_mode 'on'
set -g status-right '#{prefix_highlight} #{=21:pane_title} | %a %Y-%m-%d %H:%M'

# Automatically install tpm if it doesn't exist.
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
# }}}

# vim: set fdm=marker ft=conf foldlevel=0:
